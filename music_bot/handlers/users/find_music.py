import os

from youtubesearchpython import searchYoutube
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from handlers.users.functions import download_from_utube, slugify
from loader import dp, bot


@dp.callback_query_handler(lambda c: c.data.startswith("download"))
async def index_music(callback: types.CallbackQuery):
    link = callback.data.replace("download", "")
    path = download_from_utube(link)
    add_to_playlist = InlineKeyboardMarkup()
    add_to_playlist.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç", callback_data=f"link to playlist:{link}"))
    try:
        with open(path, "rb") as audio:
            await bot.answer_callback_query(callback.id, text="–£—Å–ø–µ—à–Ω–æ")
            await bot.send_audio(callback.from_user.id, audio, reply_markup=add_to_playlist)
            os.remove(path)
    except TypeError:
        await bot.send_message(chat_id=callback.from_user.id, text="–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–∫–µ–ª–æ")


@dp.message_handler()
async def find_first_result(message: types.Message):
    inline = InlineKeyboardMarkup()
    count = 0
    search = searchYoutube(message.text, mode="dict").result().get("search_result")
    for i in search:
        duration = i.get("duration").split(":")
        try:
            if len(duration) < 3 and int(duration[0]) < 20:
                count += 1
                inline.add(InlineKeyboardButton(f"{slugify(i.get('title'))}", callback_data=f"download{i.get('link')}"))
        except ValueError:
            continue
    if count != 0:
        await message.answer("–ü–æ–∏—Å–∫...üîé")
        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ: {count} –ø–µ—Å–µ–Ω", reply_markup=inline)
    else:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
